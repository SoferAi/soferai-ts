/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments";
import * as core from "./core";
import { Health } from "./api/resources/health/client/Client";
import { Link } from "./api/resources/link/client/Client";
import { Transcribe } from "./api/resources/transcribe/client/Client";
import { Usage } from "./api/resources/usage/client/Client";

export declare namespace SoferAIClient {
    interface Options {
        environment?: core.Supplier<environments.SoferAIEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class SoferAIClient {
    constructor(protected readonly _options: SoferAIClient.Options = {}) {}

    protected _health: Health | undefined;

    public get health(): Health {
        return (this._health ??= new Health(this._options));
    }

    protected _link: Link | undefined;

    public get link(): Link {
        return (this._link ??= new Link(this._options));
    }

    protected _transcribe: Transcribe | undefined;

    public get transcribe(): Transcribe {
        return (this._transcribe ??= new Transcribe(this._options));
    }

    protected _usage: Usage | undefined;

    public get usage(): Usage {
        return (this._usage ??= new Usage(this._options));
    }
}
