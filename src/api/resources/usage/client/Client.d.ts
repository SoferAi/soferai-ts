/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SoferaiApi from "../../../index";
export declare namespace Usage {
    interface Options {
        environment?: core.Supplier<environments.SoferaiApiEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Usage {
    protected readonly _options: Usage.Options;
    constructor(_options?: Usage.Options);
    /**
     * Get usage info
     *
     * @param {string} userId - ID of the user
     * @param {Usage.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferaiApi.UserNotFound}
     *
     * @example
     *     await client.usage.getUsage("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    getUsage(userId: string, requestOptions?: Usage.RequestOptions): Promise<SoferaiApi.Usage>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
