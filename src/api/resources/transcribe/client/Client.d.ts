/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SoferaiApi from "../../../index";
export declare namespace Transcribe {
    interface Options {
        environment?: core.Supplier<environments.SoferaiApiEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Transcribe {
    protected readonly _options: Transcribe.Options;
    constructor(_options?: Transcribe.Options);
    /**
     * Create a new transcription
     *
     * @param {SoferaiApi.TranscriptionRequest} request
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferaiApi.AuthenticationError}
     * @throws {@link SoferaiApi.RateLimitError}
     *
     * @example
     *     await client.transcribe.createTranscription({
     *         audioUrl: undefined,
     *         audioId: undefined,
     *         info: {
     *             id: undefined,
     *             userId: undefined,
     *             title: undefined,
     *             createdAt: undefined,
     *             primaryLanguage: undefined,
     *             langForHebrewWords: undefined,
     *             numSpeakers: undefined,
     *             status: undefined,
     *             duration: undefined
     *         }
     *     })
     */
    createTranscription(
        request: SoferaiApi.TranscriptionRequest,
        requestOptions?: Transcribe.RequestOptions
    ): Promise<SoferaiApi.TranscriptionId>;
    /**
     * Get transcription status
     *
     * @param {string} transcriptionId - ID of the transcription
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferaiApi.TranscriptionNotFound}
     * @throws {@link SoferaiApi.AuthenticationError}
     * @throws {@link SoferaiApi.RateLimitError}
     *
     * @example
     *     await client.transcribe.getTranscriptionStatus("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    getTranscriptionStatus(
        transcriptionId: string,
        requestOptions?: Transcribe.RequestOptions
    ): Promise<SoferaiApi.TranscriptionInfo>;
    /**
     * Get transcription
     *
     * @param {string} transcriptionId - ID of the transcription
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferaiApi.TranscriptionNotFound}
     * @throws {@link SoferaiApi.AuthenticationError}
     * @throws {@link SoferaiApi.RateLimitError}
     *
     * @example
     *     await client.transcribe.getTranscription("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    getTranscription(
        transcriptionId: string,
        requestOptions?: Transcribe.RequestOptions
    ): Promise<SoferaiApi.Transcription>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
