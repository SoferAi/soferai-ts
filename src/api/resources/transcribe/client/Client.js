"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
        ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                  desc = {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  };
              }
              Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
          });
var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
        ? function (o, v) {
              Object.defineProperty(o, "default", { enumerable: true, value: v });
          }
        : function (o, v) {
              o["default"] = v;
          });
var __importStar =
    (this && this.__importStar) ||
    function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator["throw"](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
var __importDefault =
    (this && this.__importDefault) ||
    function (mod) {
        return mod && mod.__esModule ? mod : { default: mod };
    };
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transcribe = void 0;
const environments = __importStar(require("../../../../environments"));
const core = __importStar(require("../../../../core"));
const SoferaiApi = __importStar(require("../../../index"));
const serializers = __importStar(require("../../../../serialization/index"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("../../../../errors/index"));
class Transcribe {
    constructor(_options = {}) {
        this._options = _options;
    }
    /**
     * Create a new transcription
     *
     * @param {SoferaiApi.TranscriptionRequest} request
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferaiApi.AuthenticationError}
     * @throws {@link SoferaiApi.RateLimitError}
     *
     * @example
     *     await client.transcribe.createTranscription({
     *         audioUrl: undefined,
     *         audioId: undefined,
     *         info: {
     *             id: undefined,
     *             userId: undefined,
     *             title: undefined,
     *             createdAt: undefined,
     *             primaryLanguage: undefined,
     *             langForHebrewWords: undefined,
     *             numSpeakers: undefined,
     *             status: undefined,
     *             duration: undefined
     *         }
     *     })
     */
    createTranscription(request, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(
                    (_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0
                        ? _a
                        : environments.SoferaiApiEnvironment.Production,
                    "/v1/transcriptions/"
                ),
                method: "POST",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                contentType: "application/json",
                requestType: "json",
                body: serializers.TranscriptionRequest.jsonOrThrow(request, {
                    unrecognizedObjectKeys: "strip",
                }),
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.TranscriptionId.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 401:
                        throw new SoferaiApi.AuthenticationError();
                    case 429:
                        throw new SoferaiApi.RateLimitError();
                    default:
                        throw new errors.SoferaiApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SoferaiApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SoferaiApiTimeoutError();
                case "unknown":
                    throw new errors.SoferaiApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get transcription status
     *
     * @param {string} transcriptionId - ID of the transcription
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferaiApi.TranscriptionNotFound}
     * @throws {@link SoferaiApi.AuthenticationError}
     * @throws {@link SoferaiApi.RateLimitError}
     *
     * @example
     *     await client.transcribe.getTranscriptionStatus("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    getTranscriptionStatus(transcriptionId, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(
                    (_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0
                        ? _a
                        : environments.SoferaiApiEnvironment.Production,
                    `/v1/transcriptions/${encodeURIComponent(transcriptionId)}/status`
                ),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                contentType: "application/json",
                requestType: "json",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.TranscriptionInfo.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 404:
                        throw new SoferaiApi.TranscriptionNotFound();
                    case 401:
                        throw new SoferaiApi.AuthenticationError();
                    case 429:
                        throw new SoferaiApi.RateLimitError();
                    default:
                        throw new errors.SoferaiApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SoferaiApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SoferaiApiTimeoutError();
                case "unknown":
                    throw new errors.SoferaiApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * Get transcription
     *
     * @param {string} transcriptionId - ID of the transcription
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferaiApi.TranscriptionNotFound}
     * @throws {@link SoferaiApi.AuthenticationError}
     * @throws {@link SoferaiApi.RateLimitError}
     *
     * @example
     *     await client.transcribe.getTranscription("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    getTranscription(transcriptionId, requestOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)(
                    (_a = yield core.Supplier.get(this._options.environment)) !== null && _a !== void 0
                        ? _a
                        : environments.SoferaiApiEnvironment.Production,
                    `/v1/transcriptions/${encodeURIComponent(transcriptionId)}`
                ),
                method: "GET",
                headers: {
                    Authorization: yield this._getAuthorizationHeader(),
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                contentType: "application/json",
                requestType: "json",
                timeoutMs:
                    (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) !=
                    null
                        ? requestOptions.timeoutInSeconds * 1000
                        : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return serializers.Transcription.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    breadcrumbsPrefix: ["response"],
                });
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 404:
                        throw new SoferaiApi.TranscriptionNotFound();
                    case 401:
                        throw new SoferaiApi.AuthenticationError();
                    case 429:
                        throw new SoferaiApi.RateLimitError();
                    default:
                        throw new errors.SoferaiApiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.SoferaiApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.SoferaiApiTimeoutError();
                case "unknown":
                    throw new errors.SoferaiApiError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    _getAuthorizationHeader() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const bearer =
                (_a = yield core.Supplier.get(this._options.apiKey)) !== null && _a !== void 0
                    ? _a
                    : process === null || process === void 0
                    ? void 0
                    : process.env["SOFERAI_API_KEY"];
            if (bearer != null) {
                return `Bearer ${bearer}`;
            }
            return undefined;
        });
    }
}
exports.Transcribe = Transcribe;
