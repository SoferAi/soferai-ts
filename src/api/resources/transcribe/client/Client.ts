/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SoferAI from "../../../index";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Transcribe {
    interface Options {
        environment?: core.Supplier<environments.SoferAIEnvironment | string>;
        apiKey?: core.Supplier<core.BearerToken | undefined>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Transcribe {
    constructor(protected readonly _options: Transcribe.Options = {}) {}

    /**
     * Create a new transcription
     *
     * @param {SoferAI.TranscriptionRequest} request
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferAI.AuthenticationError}
     * @throws {@link SoferAI.RateLimitError}
     *
     * @example
     *     await client.transcribe.createTranscription({
     *         audioUrl: undefined,
     *         audioId: undefined,
     *         info: {
     *             id: undefined,
     *             userId: undefined,
     *             title: undefined,
     *             createdAt: undefined,
     *             primaryLanguage: undefined,
     *             langForHebrewWords: undefined,
     *             numSpeakers: undefined,
     *             status: undefined,
     *             duration: undefined
     *         }
     *     })
     */
    public async createTranscription(
        request: SoferAI.TranscriptionRequest,
        requestOptions?: Transcribe.RequestOptions
    ): Promise<SoferAI.TranscriptionId> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SoferAIEnvironment.Production,
                "/v1/transcriptions/"
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.TranscriptionRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TranscriptionId.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new SoferAI.AuthenticationError();
                case 429:
                    throw new SoferAI.RateLimitError();
                default:
                    throw new errors.SoferAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SoferAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SoferAITimeoutError();
            case "unknown":
                throw new errors.SoferAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get transcription status
     *
     * @param {string} transcriptionId - ID of the transcription
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferAI.TranscriptionNotFound}
     * @throws {@link SoferAI.AuthenticationError}
     * @throws {@link SoferAI.RateLimitError}
     *
     * @example
     *     await client.transcribe.getTranscriptionStatus("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    public async getTranscriptionStatus(
        transcriptionId: string,
        requestOptions?: Transcribe.RequestOptions
    ): Promise<SoferAI.TranscriptionInfo> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SoferAIEnvironment.Production,
                `/v1/transcriptions/${encodeURIComponent(transcriptionId)}/status`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.TranscriptionInfo.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new SoferAI.TranscriptionNotFound();
                case 401:
                    throw new SoferAI.AuthenticationError();
                case 429:
                    throw new SoferAI.RateLimitError();
                default:
                    throw new errors.SoferAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SoferAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SoferAITimeoutError();
            case "unknown":
                throw new errors.SoferAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get transcription
     *
     * @param {string} transcriptionId - ID of the transcription
     * @param {Transcribe.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SoferAI.TranscriptionNotFound}
     * @throws {@link SoferAI.AuthenticationError}
     * @throws {@link SoferAI.RateLimitError}
     *
     * @example
     *     await client.transcribe.getTranscription("d5e9c84f-c2b2-4bf4-b4b0-7ffd7a9ffc32")
     */
    public async getTranscription(
        transcriptionId: string,
        requestOptions?: Transcribe.RequestOptions
    ): Promise<SoferAI.Transcription> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.SoferAIEnvironment.Production,
                `/v1/transcriptions/${encodeURIComponent(transcriptionId)}`
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.Transcription.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new SoferAI.TranscriptionNotFound();
                case 401:
                    throw new SoferAI.AuthenticationError();
                case 429:
                    throw new SoferAI.RateLimitError();
                default:
                    throw new errors.SoferAIError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SoferAIError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SoferAITimeoutError();
            case "unknown":
                throw new errors.SoferAIError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["SOFERAI_API_KEY"];
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
